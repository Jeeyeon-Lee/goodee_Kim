getter/setter


오라클 연동하기

XXXDao.java -> JDBC API연동하기(기본-실전에서는 사용하지 않음) 
- > myBatis(ORM 솔루션, 오픈소스이다, 라이브러리)
라이브러리는 제어권을 갖고 있지 않아서 얼마든지 손 쉽게 기존 플젝에 반영이 가능함
myBatis에서는 조회결과를 resultType( XXXVO,  )에 지정한 객체에 자동으로 담아준다.

-> Spring F/W - 틀, 와꾸 - 제어권을 갖는다. -제어역전(역제어) spring-core.jar지원
JPA api를 활용하여 JDBC연동함
(myBatis대신에 Hibernate-
(DML이 없다-직관적이지 않다-대신에 데이터셋에 필요한 클래스를 설계해야 한다??? 
이때 getter와 setter 컨벤션이 필요하다.- Lombok Library로 대체-생략된다)사용)
//변수를 private으로 하는 것은 약간 불편하지만 대신에
//메소드를 통해서 변수를 사용하면 입력받은 값(하나의 인스턴스에 국한)에 대해서 유효성체크하는 코드를 추가
//할 수 있다는 건 시스템을 안전하게 할 수 있는 부분이다.
//사용자가 입력한 값에 대한 유효성 체크도 개발자의 책임이다.
public void setMonth(int month){//13, 15
  if(month >= 0 && month <12){
  	 isValid = true;
  }

}

스프링프레임워크 혹은 전자정부프레임워크(스프링기반)
객체에 대한 주입(제어권)을 스프링 컨테이너(ApplicationContext, BeanFactory)가 갖는다. 
직접 개발자가 인스턴스화 하지 않는다 - 반드시 지켜져야 한다.(약속, 표준)
직접 인스턴스화 하지 않는 대신에 setter꼴을 선언하여 인스턴스 변수로 사용하면
네가 필요할 때 내가 대신 인스턴스화 해줄께
객체에 대한 주도권(사이프사이클) 스프링 컨테이너가 쥔다(메소드로 주입받는다)
필드에 오는 타입이 참조형의 경우 setter메소드를 통해서 객체가 주입된다. - 기억


상속 & 추상 클래스 & 인터페이스
API(활용능력)를 볼 수 있도록 설명은 해준다.
 
 상속
 A is a B관계일때 적용한다.
 extends 키워드 사용한다.
 부모가 정의하고 있는 필드(전변)와 메소드를 자손이 언제나 사용 가능함 - 재사용성
 그러나 클래스 사이의 결합도는 높다. - 이런부분은 별로임
 결합도는 낮추는 방법이 추상클래스 중심 혹은 인터페이스 중심의 코딩을 전개하라
 스프링 프레임워크는 (spring-core.jar{ApplicationContext, BeanFactory})
 추상클래스와 인터페이스를 제공하는 것이다.
 그중에서도 추상클래스는 설계의 확장(새로운 컨셉의 객체를 제공함- 새로운 서비스 추가제공함)
 기능적인 부분에서 확장이나 업그레이드 - 인스페이스의 역할
 객체가 가지는 특성을 활용하여 기능을 처리하는데 지분
 객체가 가지는 특성을 타지 않고 고유한 그 객체만의 기능을 제공하자(결합도가 낮아진다, 단위테스트가능해짐)
 
 인터페이스는 implements를 사용함
 일반메소드 못 가짐(추상클래스는 일반메소드도 갖고 추상메소드도 갖는다)
 생성자도 갖지 못함 (추상클래스는 가능함)
 단일 상속만 가능하다는 단점을 인터페이스를 통해서 보완할 수 있다.
 class A extends JFrame{}
class A extends JFrame implements Runnable{}
 
 선언부 - 인터페이스
 생성부 - 클래스
 전제조건에서 다형성을 누릴 수 있다.
 인터페이스는 반드시 구현체 클래스가 있어야 기능 구현이 된다.
List list = new List();
 
List my = new ArrayList();
my로 호출할 수 있는 메소드 보다 al로 호출할 수 있는 메소드가 더 많다. 그렇다.참이다.

상속을 받을 때는 상위클래스보다 하위클래스를 상속받는것이 더 많은 메소드를 호출 할 수 있다.

List가 제공하는 메소드(추상메소드-abstract)와 ArrayList제공하는 메소드(일반메소드- abstract)가 같다|다르지

ArrayList al = new ArrayList();





